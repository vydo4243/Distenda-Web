const Notification = require("../../models/notification.model");
const User = require("../../models/user.model");
const Course = require("../../models/course.model");

// [POST] /notification/add
module.exports.add = async (req, res) => {
  const { message, type = "info", userToken } = req.body;

  try {
    const user = await User.findOne({ UserToken: userToken });
    if (!user) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y user" });

    const exists = await Notification.findOne({
      UserId: user._id,
      NotificationMessage: message,
      NotificationStatus: 1,
      NotificationDeleted: 1
    });

    if (exists) {
      return res.json({ success: false, message: "Th√¥ng b√°o n√†y ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥." });
    }

    await Notification.create({
      NotificationMessage: message,
      NotificationType: type,
      NotificationStatus: 1,
      NotificationDeleted: 1,
      UserId: user._id,
      createdBy: {
        UserId: user._id,
        createdAt: new Date(),
      },
    });

    res.json({ success: true, message: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c t·∫°o" });
  } catch (error) {
    console.error("L·ªói t·∫°o th√¥ng b√°o:", error);
    res.status(500).json({ success: false, message: "T·∫°o th√¥ng b√°o th·∫•t b·∫°i", error });
  }
};

// [GET] /notification/user/:userToken
module.exports.getUserNotifications = async (req, res) => {
  try {
    const { userToken } = req.params;
    const user = await User.findOne({ UserToken: userToken });
    if (!user) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y user" });

    const notifications = await Notification.find({
      UserId: user._id,
      NotificationDeleted: 1,
      NotificationStatus: 1,
    }).sort({ "createdBy.createdAt": -1 });

    res.json({ success: true, data: notifications });
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng b√°o:", error);
    res.status(500).json({ success: false, message: "Kh√¥ng th·ªÉ l·∫•y th√¥ng b√°o", error: error.message });
  }
};

// [DELETE] /notification/:id
module.exports.deleteNotification = async (req, res) => {
  try {
    const result = await Notification.deleteOne({ _id: req.params.id });
    if (result.deletedCount === 0) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o ƒë·ªÉ x√≥a" });
    }

    res.json({ success: true, message: "Xo√° th√¥ng b√°o th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ success: false, message: "Xo√° th·∫•t b·∫°i", error: error.message });
  }
};

// [POST] /notification/check-expiry
module.exports.checkCourseExpiry = async (req, res) => {
  try {
    const { userToken } = req.body;
    const user = await User.findOne({ UserToken: userToken });
    if (!user) return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y user" });

    const today = new Date();

    for (const userCourse of user.UserCourse) {
      const course = await Course.findById(userCourse.CourseId);
      if (!course) continue;

      const startDate = new Date(userCourse.CourseDayAt);
      const expireDate = new Date(startDate);
      expireDate.setMonth(expireDate.getMonth() + course.CourseDuration);
      const diffDays = Math.ceil((expireDate - today) / (1000 * 60 * 60 * 24));

      console.log(`üìö Ki·ªÉm tra kh√≥a "${course.CourseName}": Duration=${course.CourseDuration}, Status=${userCourse.CourseStatus}, c√≤n ${diffDays} ng√†y`);

      // N·∫øu ƒë√£ ho√†n th√†nh, ch·ªâ g·ª≠i th√¥ng b√°o ho√†n th√†nh n·∫øu ch∆∞a g·ª≠i
      if (userCourse.CourseStatus === 1) {
        const completeMsg = `Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh kh√≥a h·ªçc "${course.CourseName}"! H√£y v√†o l·∫°i kh√≥a h·ªçc ƒë·ªÉ l·∫•y ch·ª©ng ch·ªâ nh√©.`;

        const existedComplete = await Notification.findOne({
          UserId: user._id,
          NotificationMessage: completeMsg,
          NotificationStatus: 1,
          NotificationDeleted: 1,
        });

        if (!existedComplete) {
          await Notification.create({
            NotificationMessage: completeMsg,
            NotificationType: "course_completed",
            NotificationStatus: 1,
            NotificationDeleted: 1,
            UserId: user._id,
            NotificationLink: `/courses/CoursePurchased/${course.CourseSlug}`,
            createdBy: { UserId: user._id, createdAt: today },
          });
          console.log(`üèÅ ƒê√£ g·ª≠i th√¥ng b√°o ho√†n th√†nh cho "${course.CourseName}"`);
        }

        // ƒê√£ ho√†n th√†nh th√¨ b·ªè qua ki·ªÉm tra h·∫°n
        continue;
      }

      // N·∫øu ch∆∞a ho√†n th√†nh v√† kh√≥a h·ªçc kh√¥ng gi·ªõi h·∫°n th·ªùi gian => KH√îNG th√¥ng b√°o h·∫øt h·∫°n
      if (course.CourseDuration === 0) {
        continue;
      }

      // N·∫øu ch∆∞a ho√†n th√†nh v√† kh√≥a c√≥ gi·ªõi h·∫°n th·ªùi gian
      if ([15, 10, 3, 1].includes(diffDays)) {
        const expiringMsg = `Kh√≥a h·ªçc "${course.CourseName}" c·ªßa b·∫°n s·∫Ω h·∫øt h·∫°n sau ${diffDays} ng√†y!`;

        const existedExpiring = await Notification.findOne({
          UserId: user._id,
          NotificationMessage: expiringMsg,
          NotificationStatus: 1,
          NotificationDeleted: 1,
        });

        if (!existedExpiring) {
          await Notification.create({
            NotificationMessage: expiringMsg,
            NotificationType: "course_expiring",
            NotificationStatus: 1,
            NotificationDeleted: 1,
            UserId: user._id,
            createdBy: { UserId: user._id, createdAt: today },
          });
          console.log(`‚è∞ ƒê√£ g·ª≠i th√¥ng b√°o s·∫Øp h·∫øt h·∫°n cho "${course.CourseName}"`);
        }
      }

      // N·∫øu kh√≥a h·ªçc ƒë√£ h·∫øt h·∫°n (h·∫°n < 0 ng√†y) m√† v·∫´n ch∆∞a ho√†n th√†nh
      if (diffDays < 0) {
        const expiredMsg = `Kh√≥a h·ªçc "${course.CourseName}" c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng k√Ω l·∫°i n·∫øu mu·ªën ti·∫øp t·ª•c h·ªçc!`;

        const existedExpired = await Notification.findOne({
          UserId: user._id,
          NotificationMessage: expiredMsg,
          NotificationStatus: 1,
          NotificationDeleted: 1,
        });

        if (!existedExpired) {
          await Notification.create({
            NotificationMessage: expiredMsg,
            NotificationType: "course_expired",
            NotificationStatus: 1,
            NotificationDeleted: 1,
            UserId: user._id,
            createdBy: { UserId: user._id, createdAt: today },
          });
          console.log(`‚ùå ƒê√£ g·ª≠i th√¥ng b√°o h·∫øt h·∫°n cho "${course.CourseName}"`);
        }
      }
    }

    res.json({ success: true, message: "ƒê√£ ki·ªÉm tra v√† g·ª≠i th√¥ng b√°o n·∫øu c·∫ßn." });
  } catch (error) {
    console.error("üí• L·ªói ki·ªÉm tra kh√≥a h·ªçc:", error);
    res.status(500).json({ success: false, message: "L·ªói server", error });
  }
};
